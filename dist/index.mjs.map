{"version":3,"sources":["../src/mswLoader.ts"],"names":["handlers"],"mappings":";AACA,SAAoC,mBAAmB;AAcvD,IAAI;AACJ,IAAI;AAEG,IAAM,aAAa,OAAO,YAA2B;AAC1D,QAAM;AACR;AAEA,IAAM,gBAAgB,CAAC,QAA8B;AACnD,MAAI,QAAQ;AACV,QAAI,OAAO;AAAmB;AAC9B,WAAO,cAAc;AACrB,QAAI,KAAK;AACP,UAAI,MAAM,QAAQ,GAAG,KAAK,IAAI,SAAS,GAAG;AACxC,eAAO,IAAI,GAAG,GAAG;AAAA,MACnB,WAAW,cAAc,OAAO,IAAI,UAAU;AAC5C,cAAM,WAAW,OAAO,OAAO,IAAI,QAAQ,EACxC,OAAO,OAAO,EACd;AAAA,UACC,CAACA,WAAU,iBAAiBA,UAAS,OAAO,YAAY;AAAA,UACxD,CAAC;AAAA,QACH;AAEF,YAAI,SAAS,SAAS,GAAG;AACvB,kBAAQ,IAAI,YAAY,QAAQ;AAChC,iBAAO,IAAI,GAAG,QAAQ;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAEO,IAAM,YAAY,OAAO,YAAqB;AACnD,QAAM;AAAA,IACJ,YAAY,EAAE,IAAI;AAAA,IAClB;AAAA,EACF,IAAI;AAEJ,MAAI,CAAC,OAAQ,OAAO,qBAAqB,OAAO,kBAAkB,QAAQ;AACxE;AAAA,EACF;AAEA,MAAI,aAAa,UAAU,OAAO,kBAAkB,QAAQ;AAC1D,aACE,OAAO,OAAO,YAAY,eAAe,OAAO,kBAAkB;AAAA,EACtE,OAAO;AACL,aAAS,OAAO,OAAO,YAAY,eAAe,YAAY;AAAA,EAChE;AACA,QAAM,OAAO,MAAM,GAAG;AACtB,gBAAc,GAAG;AAEjB,MAAI,QAAQ;AACV,WAAO,oBAAoB,OAAO,qBAAqB,CAAC;AACxD,WAAO,kBAAkB,SAAS;AAAA,EACpC;AACA,SAAO,CAAC;AACV","sourcesContent":["import { RequestHandler } from \"msw\";\nimport { SetupWorker, StartOptions, setupWorker } from \"msw/browser\";\n\nexport type MswParameters = {\n  msw?: {\n    handlers: RequestHandler[];\n    originalResponses: Record<string, any>;\n  };\n};\n\ntype Context = {\n  parameters: MswParameters;\n  viewMode: string;\n};\n\nlet worker: SetupWorker;\nlet opt: StartOptions;\n\nexport const initialize = async (options?: StartOptions) => {\n  opt = options;\n};\n\nconst setupHandlers = (msw: MswParameters[\"msw\"]) => {\n  if (worker) {\n    if (window.__MSW_STORYBOOK__) return;\n    worker.resetHandlers();\n    if (msw) {\n      if (Array.isArray(msw) && msw.length > 0) {\n        worker.use(...msw);\n      } else if (\"handlers\" in msw && msw.handlers) {\n        const handlers = Object.values(msw.handlers)\n          .filter(Boolean)\n          .reduce(\n            (handlers, handlersList) => handlers.concat(handlersList),\n            [] as RequestHandler[],\n          );\n\n        if (handlers.length > 0) {\n          console.log(\"handlers\", handlers);\n          worker.use(...handlers);\n        }\n      }\n    }\n  }\n};\n\nexport const mswLoader = async (context: Context) => {\n  const {\n    parameters: { msw },\n    viewMode,\n  } = context;\n\n  if (!msw || (window.__MSW_STORYBOOK__ && window.__MSW_STORYBOOK__.worker)){\n    return;\n  }\n\n  if (viewMode === \"docs\" && window.__MSW_STORYBOOK__.worker) {\n    worker =\n      typeof global.process === \"undefined\" && window.__MSW_STORYBOOK__.worker;\n  } else {\n    worker = typeof global.process === \"undefined\" && setupWorker();\n  }\n  await worker.start(opt);\n  setupHandlers(msw);\n\n  if (worker) {\n    window.__MSW_STORYBOOK__ = window.__MSW_STORYBOOK__ || {};\n    window.__MSW_STORYBOOK__.worker = worker;\n  }\n  return {};\n};\n\n// const modifyHandlersAndArgs = (handlers: any, context: Context) => {\n//   handlers.forEach((handler: any) => {\n//     const modifiedPath =\n//       handler.info.path.replace(/\\/$/, \"\") + `/${self.crypto.randomUUID()}`;\n//     Object.keys(context.args).forEach((key) => {\n//       if (context.args[key] === handler.info.path) {\n//         context.args[key] = modifiedPath;\n//       }\n//     });\n//     Object.keys(context.allArgs).forEach((key) => {\n//       if (context.allArgs[key] === handler.info.path) {\n//         context.allArgs[key] = modifiedPath;\n//       }\n//     });\n//     Object.keys(context.initialArgs).forEach((key) => {\n//       if (context.initialArgs[key] === handler.info.path) {\n//         context.initialArgs[key] = modifiedPath;\n//       }\n//     });\n//     handler.info.header = handler.info.header.replace(\n//       handler.info.path,\n//       modifiedPath,\n//     );\n//     handler.info.path = modifiedPath;\n//   });\n\n//   return { handlers: handlers, context: context };\n// };\n\n// const getOriginalResponses = async (handlers: RequestHandler[]) => {\n//   const originalResponses = {} as Record<string, any>;\n\n//   for (const handler of handlers) {\n//     console.log(\"handler\", handler);\n\n//     if (handler.info.header.includes(\"query\")) {\n//       const graphQLHandler = handler as GraphQLHandler;\n//       console.log(\"GraphQL: \", handler.log);\n//       // const originalRequest = new Request(path, {\n//       //   method,\n//       // });\n\n//       // const originalResponse = await fetch(originalRequest);\n//       // let originalData;\n//       // if (!originalResponse.ok) originalData = null;\n//       // else originalData = await originalResponse.json();\n//       // originalResponses[handlerResponseKey(httpHandler)] = {\n//       //   data: originalData,\n//       //   status: originalResponse.status,\n//       // };\n//     } else {\n//       const httpHandler = handler as HttpHandler;\n//       const path = httpHandler.info.path;\n//       const method = httpHandler.info.method || HttpMethods.GET;\n\n//       if (typeof path !== \"string\") {\n//         console.warn(\n//           `[MSW] Failed to retrieve the original response for the given handler. Can only retrieve original responses for handlers with a string path, RegExp is currently not supported. Offending path: ${path}`,\n//         );\n//         continue;\n//       }\n\n//       if (typeof method !== \"string\") {\n//         console.warn(\n//           `[MSW] Failed to retrieve the original response for the given handler. Can only retrieve original responses for handlers with a string method, RegExp is currently not supported. Offending path: ${path}`,\n//         );\n//         continue;\n//       }\n\n//       const originalRequest = new Request(path, {\n//         method,\n//       });\n\n//       const originalResponse = await fetch(originalRequest);\n//       let originalData;\n//       if (!originalResponse.ok) originalData = null;\n//       else originalData = await originalResponse.json();\n//       originalResponses[handlerResponseKey(httpHandler)] = {\n//         data: originalData,\n//         status: originalResponse.status,\n//       };\n//     }\n//   }\n//   return originalResponses;\n// };\n"]}