{"version":3,"sources":["../src/manager.ts","../src/constants.ts","../src/Panel.tsx","../src/utils/statusMap.ts","../src/helpers.ts"],"names":["addons","types","ADDON_ID","PANEL_ID","EVENTS","React","useAddonState","useChannel","AddonPanel","Form","ScrollArea","Button","RangeControl","ObjectControl","styled","statusTextMap","statusMap_default","SEPARATOR","handlerResponseKeyParts","key","method","path","statusCodes","Select","Container","theme","ObjectControlContainer","SBSelect","Label","ObjectsContainer","SBButton","Panel","props","addonState","setAddonState","dataHasChanged","setDataHasChanged","emit","newAddonState","onReset","onChange","value","onChangeResponse","objectKey","objectValue","getRender","event","code","viewMode"],"mappings":"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","sourcesContent":["import { addons, types } from \"@storybook/manager-api\";\nimport { ADDON_ID, PANEL_ID } from \"./constants\";\nimport { Panel } from \"./Panel\";\n\naddons.register(ADDON_ID, () => {\n  addons.add(PANEL_ID, {\n    type: types.PANEL,\n    title: \"MSW\",\n    match: ({ viewMode }) => viewMode === \"story\",\n    render: Panel,\n  });\n});\n","export const ADDON_ID = \"storybook/msw-vite-addon\";\nexport const PANEL_ID = `${ADDON_ID}/panel`;\nexport const PARAM_KEY = `msw`;\n\nexport const EVENTS = {\n  SEND: `${ADDON_ID}/send`,\n  UPDATE: `${ADDON_ID}/update`,\n  UPDATE_RESPONSES: `${ADDON_ID}/update-responses`,\n  RESET: `${ADDON_ID}/reset`,\n};\n","import React from \"react\";\nimport { useAddonState, useChannel } from \"@storybook/manager-api\";\nimport { AddonPanel, Form, ScrollArea, Button } from \"@storybook/components\";\nimport { ADDON_ID, EVENTS } from \"./constants\";\nimport { RangeControl } from \"@storybook/blocks\";\nimport { ObjectControl } from \"@storybook/blocks\";\nimport { styled } from \"@storybook/theming\";\nimport statusTextMap from \"./utils/statusMap\";\nimport { handlerResponseKeyParts } from \"./helpers\";\n\nconst statusCodes = Object.keys(statusTextMap);\n\nconst { Select } = Form;\n\ninterface PanelProps {\n  active: boolean;\n}\n\nconst Container = styled.div`\n  box-shadow: rgb(0 0 0 / 10%) 0px 1px 3px 0px;\n\n  & > div:not(:first-child) {\n    border-block-start: 1px solid ${({ theme }) => theme.appBorderColor};\n  }\n\n  & > div:last-child {\n    border-block-end: 1px solid ${({ theme }) => theme.appBorderColor};\n  }\n\n  & > div {\n    padding-block: 2rem;\n    padding-inline: 1rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    gap: 1rem;\n  }\n\n  h3 {\n    margin-block-end: 0.5rem;\n  }\n`;\n\nconst ObjectControlContainer = styled.div`\n  border: 1px solid ${({ theme }) => theme.appBorderColor};\n  border-radius: 5px;\n  padding: 1rem;\n\n  &:not(:first-child) {\n    margin-block-start: 1rem;\n  }\n`;\n\nconst SBSelect = styled(Select)`\n  inline-size: 100%;\n`;\n\nconst Label = styled.div`\n  margin-bottom: 1rem;\n  flex: 1 0 50%;\n`;\n\nconst ObjectsContainer = styled.div`\n  flex: 1 1 50%;\n`;\n\nconst SBButton = styled(Button)`\n  margin-block-start: 1rem;\n`;\n\nexport const Panel: React.FC<PanelProps> = (props) => {\n  const [addonState, setAddonState] = useAddonState(ADDON_ID, {} as any);\n\n  const [dataHasChanged, setDataHasChanged] = React.useState(false);\n\n  const emit = useChannel({\n    [EVENTS.SEND]: (newAddonState) => {\n      setAddonState({ ...addonState, ...newAddonState });\n    },\n  });\n\n  const onReset = () => {\n    emit(EVENTS.RESET);\n    setDataHasChanged(false);\n  };\n\n  const onChange = (key: string, value: number | string) => {\n    emit(EVENTS.UPDATE, { key, value });\n  };\n\n  const onChangeResponse = (\n    key: string,\n    objectKey: string,\n    objectValue: number | string\n  ) => {\n    setDataHasChanged(true);\n    emit(EVENTS.UPDATE_RESPONSES, { key, objectKey, objectValue });\n  };\n\n  const getRender = () => {\n    if (\n      addonState.delay !== undefined &&\n      addonState.status !== undefined &&\n      addonState.responses !== undefined\n    )\n      return (\n        <ScrollArea>\n          <Container>\n            <div>\n              <Label>\n                <h3>Response Delay : {addonState.delay} ms</h3>\n                <p>Set a mock response delay</p>\n              </Label>\n              <RangeControl\n                name=\"delay\"\n                value={addonState.delay}\n                onChange={(value) => onChange(\"delay\", value)}\n                min={0}\n                max={10000}\n                step={500}\n              />\n            </div>\n            <div>\n              <Label>\n                <h3>Response Status : {addonState.status}</h3>\n                <p>Select a mock response status</p>\n              </Label>\n              <SBSelect\n                onChange={(event) => onChange(\"status\", event.target.value)}\n                value={addonState.status}\n                name=\"status\"\n              >\n                {statusCodes.map((code) => (\n                  <option key={code} value={code}>\n                    {code} - {statusTextMap[code]}\n                  </option>\n                ))}\n              </SBSelect>\n            </div>\n            <div>\n              <Label>\n                <h3>Response Data</h3>\n                <p>Edit the mock response data</p>\n              </Label>\n              <ObjectsContainer>\n                {addonState.responses &&\n                  Object.keys(addonState.responses).length > 0 &&\n                  Object.keys(addonState.responses).map((key) => {\n                    const { method, path } = handlerResponseKeyParts(key);\n                    return (\n                      <ObjectControlContainer key={key}>\n                        <ObjectControl\n                          name={`${method} ${path}`}\n                          value={addonState.responses[key].data}\n                          onChange={(value) =>\n                            onChangeResponse(\"responses\", key, value)\n                          }\n                          theme={undefined}\n                        />\n                      </ObjectControlContainer>\n                    );\n                  })}\n              </ObjectsContainer>\n            </div>\n            <div>\n              <Label>\n                <h3>Reset</h3>\n                <p>Reset the original mock response data</p>\n              </Label>\n              <SBButton\n                primary={true}\n                onClick={onReset}\n                disabled={!dataHasChanged}\n              >\n                Reset Mock Data\n              </SBButton>\n            </div>\n          </Container>\n        </ScrollArea>\n      );\n    return (\n      <Container>\n        <Label>No mock data.</Label>\n      </Container>\n    );\n  };\n\n  return (\n    <AddonPanel {...props}>\n      <div>{getRender()}</div>\n    </AddonPanel>\n  );\n};\n","type StatusTextMap = {\n  [key: string]: string;\n};\n\nconst statusTextMap: StatusTextMap = {\n  200: \"OK\",\n  401: \"Unauthorized\",\n  403: \"Forbidden\",\n  404: \"Not Found\",\n  500: \"Internal Server Error\",\n};\n\nexport default statusTextMap;\n","import {HttpHandler} from \"msw\";\n\nconst SEPARATOR = \"__HandlerResponseKeySeparator__\";\n\nexport const handlerResponseKey = (handler: HttpHandler) => {\n  return [handler.info.method, handler.info.path].join(SEPARATOR);\n}\n\nexport const handlerResponseKeyParts = (key: string) => {\n  const [method, path] = key.split(SEPARATOR);\n\n  return { method, path };\n}\n"]}