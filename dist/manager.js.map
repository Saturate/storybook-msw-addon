{"version":3,"sources":["../src/manager.ts","../src/constants.ts","../src/Panel.tsx","../src/utils/statusMap.ts","../src/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { addons, types } from \"@storybook/manager-api\";\nimport { ADDON_ID, PANEL_ID } from \"./constants\";\nimport { Panel } from \"./Panel\";\n\naddons.register(ADDON_ID, () => {\n  addons.add(PANEL_ID, {\n    type: types.PANEL,\n    title: \"MSW\",\n    match: ({ viewMode }) => viewMode === \"story\",\n    render: Panel,\n  });\n});\n","export const ADDON_ID = \"storybook/msw-vite-addon\";\nexport const PANEL_ID = `${ADDON_ID}/panel`;\nexport const PARAM_KEY = `msw`;\n\nexport const EVENTS = {\n  SEND: `${ADDON_ID}/send`,\n  UPDATE: `${ADDON_ID}/update`,\n  UPDATE_RESPONSES: `${ADDON_ID}/update-responses`,\n  RESET: `${ADDON_ID}/reset`,\n};\n","import React from \"react\";\nimport { useAddonState, useChannel } from \"@storybook/manager-api\";\nimport { AddonPanel, Form, ScrollArea, Button } from \"@storybook/components\";\nimport { ADDON_ID, EVENTS } from \"./constants\";\nimport { RangeControl } from \"@storybook/blocks\";\nimport { ObjectControl } from \"@storybook/blocks\";\nimport { styled } from \"@storybook/theming\";\nimport statusTextMap from \"./utils/statusMap\";\nimport { handlerResponseKeyParts } from \"./helpers\";\n\nconst statusCodes = Object.keys(statusTextMap);\n\nconst { Select } = Form;\n\ninterface PanelProps {\n  active: boolean;\n}\n\nconst Container = styled.div`\n  box-shadow: rgb(0 0 0 / 10%) 0px 1px 3px 0px;\n\n  & > div:not(:first-child) {\n    border-block-start: 1px solid ${({ theme }) => theme.appBorderColor};\n  }\n\n  & > div:last-child {\n    border-block-end: 1px solid ${({ theme }) => theme.appBorderColor};\n  }\n\n  & > div {\n    padding-block: 2rem;\n    padding-inline: 1rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    gap: 1rem;\n  }\n\n  h3 {\n    margin-block-end: 0.5rem;\n  }\n`;\n\nconst ObjectControlContainer = styled.div`\n  border: 1px solid ${({ theme }) => theme.appBorderColor};\n  border-radius: 5px;\n  padding: 1rem;\n\n  &:not(:first-child) {\n    margin-block-start: 1rem;\n  }\n`;\n\nconst SBSelect = styled(Select)`\n  inline-size: 100%;\n`;\n\nconst Label = styled.div`\n  margin-bottom: 1rem;\n  flex: 1 0 50%;\n`;\n\nconst ObjectsContainer = styled.div`\n  flex: 1 1 50%;\n`;\n\nconst SBButton = styled(Button)`\n  margin-block-start: 1rem;\n`;\n\nexport const Panel: React.FC<PanelProps> = (props) => {\n  const [addonState, setAddonState] = useAddonState(ADDON_ID, {} as any);\n\n  const [dataHasChanged, setDataHasChanged] = React.useState(false);\n\n  const emit = useChannel({\n    [EVENTS.SEND]: (newAddonState) => {\n      setAddonState({ ...addonState, ...newAddonState });\n    },\n  });\n\n  const onReset = () => {\n    emit(EVENTS.RESET);\n    setDataHasChanged(false);\n  };\n\n  const onChange = (key: string, value: number | string) => {\n    emit(EVENTS.UPDATE, { key, value });\n  };\n\n  const onChangeResponse = (\n    key: string,\n    objectKey: string,\n    objectValue: number | string,\n  ) => {\n    setDataHasChanged(true);\n    emit(EVENTS.UPDATE_RESPONSES, { key, objectKey, objectValue });\n  };\n\n  const getRender = () => {\n    if (\n      addonState.delay !== undefined &&\n      addonState.status !== undefined &&\n      addonState.responses !== undefined\n    )\n      return (\n        <ScrollArea>\n          <Container>\n            <div>\n              <Label>\n                <h3>Response Delay : {addonState.delay} ms</h3>\n                <p>Set a mock response delay</p>\n              </Label>\n              <RangeControl\n                name=\"delay\"\n                value={addonState.delay}\n                onChange={(value) => onChange(\"delay\", value)}\n                min={0}\n                max={10000}\n                step={500}\n              />\n            </div>\n            <div>\n              <Label>\n                <h3>Response Status : {addonState.status}</h3>\n                <p>Select a mock response status</p>\n              </Label>\n              <SBSelect\n                onChange={(event) => onChange(\"status\", event.target.value)}\n                value={addonState.status}\n                name=\"status\"\n              >\n                {statusCodes.map((code) => (\n                  <option key={code} value={code}>\n                    {code} - {statusTextMap[code]}\n                  </option>\n                ))}\n              </SBSelect>\n            </div>\n            <div>\n              <Label>\n                <h3>Response Data</h3>\n                <p>Edit the mock response data</p>\n              </Label>\n              <ObjectsContainer>\n                {addonState.responses &&\n                  Object.keys(addonState.responses).length > 0 &&\n                  Object.keys(addonState.responses).map((key) => {\n                    const { method, path } = handlerResponseKeyParts(key);\n                    console.log(\"key\", key);\n                    return (\n                      <ObjectControlContainer key={key}>\n                        <ObjectControl\n                          name={`${method} ${path}`}\n                          value={\n                            addonState.responses[key].response.jsonBodyData\n                          }\n                          onChange={(value) =>\n                            onChangeResponse(\"responses\", key, value)\n                          }\n                          theme={undefined}\n                        />\n                      </ObjectControlContainer>\n                    );\n                  })}\n              </ObjectsContainer>\n            </div>\n            <div>\n              <Label>\n                <h3>Reset</h3>\n                <p>Reset the original mock response data</p>\n              </Label>\n              <SBButton\n                primary={true}\n                onClick={onReset}\n                disabled={!dataHasChanged}\n              >\n                Reset Mock Data\n              </SBButton>\n            </div>\n          </Container>\n        </ScrollArea>\n      );\n    return (\n      <Container>\n        <Label>No mock data.</Label>\n      </Container>\n    );\n  };\n\n  return (\n    <AddonPanel {...props}>\n      <div>{getRender()}</div>\n    </AddonPanel>\n  );\n};\n","type StatusTextMap = {\n  [key: string]: string;\n};\n\nconst statusTextMap: StatusTextMap = {\n  200: \"OK\",\n  401: \"Unauthorized\",\n  403: \"Forbidden\",\n  404: \"Not Found\",\n  500: \"Internal Server Error\",\n};\n\nexport default statusTextMap;\n","import { HttpHandler } from \"msw\";\n\nconst SEPARATOR = \"__HandlerResponseKeySeparator__\";\n\nexport const handlerResponseKey = (handler: HttpHandler) => {\n  return [handler.info.method, handler.info.path].join(SEPARATOR);\n};\n\nexport const handlerResponseKeyParts = (key: string) => {\n  const [method, path] = key.split(SEPARATOR);\n\n  return { method, path };\n};\n"]}